import pytest
from playwright.async_api import async_playwright, expect
import asyncio
import logging
import os
import datetime


class EmojiFormatter(logging.Formatter):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ª–æ–≥–æ–≤."""
    LEVEL_EMOJIS = {
        logging.DEBUG: "‚ÑπÔ∏è",
        logging.INFO: "‚úÖ",
        logging.WARNING: "‚ö†Ô∏è",
        logging.ERROR: "‚ùå",
        logging.CRITICAL: "üí•",
    }

    def format(self, record):
        emoji = self.LEVEL_EMOJIS.get(record.levelno, "")
        record.msg = f"{emoji} {record.msg}"
        return super().format(record)

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger("emoji_logger")
logger.setLevel(logging.DEBUG)
console_handler = logging.StreamHandler()
console_handler.setFormatter(EmojiFormatter("%(asctime)s - %(levelname)s - %(message)s", "%H:%M:%S"))
logger.addHandler(console_handler)


# —á—Ç–æ–±—ã –ø–∞–ø–∫–∞ (–¥–ª—è –≤–∏–¥–µ–æ) —Å–æ–∑–¥–∞–≤–∞–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤
@pytest.fixture(scope="session", autouse=True)
def create_video_folder():
    os.makedirs("videos", exist_ok=True)



@pytest.mark.asyncio
async def login_to_site(page):
    """–ú–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ."""
    try:
        await page.goto("https://url/")
        
        login = page.locator('//*[@id="username"]')
        await login.click()
        await login.fill("Admin1")
        await login.press("Enter")
        print("\n") # –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–¥–ª—è –∞–±–∑–∞—Ü–∞)
        logger.info("–õ–æ–≥–∏–Ω –≤–≤–µ–¥–µ–Ω.")

        password = page.locator('//*[@id="password"]')
        await password.click()
        await password.fill("password")
        await password.press("Enter")
        logger.info("–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω.")

    except Exception as e:
        logger.error(f"–õ–æ–≥–∏–Ω –∏–ª–∏ –ü–∞—Ä–æ–ª—å –Ω–µ –≤–≤–µ–¥–µ–Ω—ã: {e}")
        pytest.fail(f"–õ–æ–≥–∏–Ω –∏–ª–∏ –ü–∞—Ä–æ–ª—å –Ω–µ –≤–≤–µ–¥–µ–Ω—ã: {e}")

    await asyncio.sleep(2)

    try:
        #button_login = page.locator('//span[text()="Login"]')
        button_login = page.get_by_role("button", name="Login")
        #await button_login.wait_for(timeout=4000)
        await button_login.wait_for(state="visible", timeout=4000)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏      
        await button_login.click()
        logger.info("–ö–Ω–æ–ø–∫–∞ Login –Ω–∞–∂–∞—Ç–∞.")
    except Exception as e:
        logger.error(f"–ö–Ω–æ–ø–∫–∞ Login –ù–ï –Ω–∞–∂–∞—Ç–∞: {e}")

@pytest.mark.asyncio
async def test_table_row_values():
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        video_path = f"videos/test_run_{timestamp}"        
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∑–∞–ø–∏—Å—å—é –≤–∏–¥–µ–æ
        context = await browser.new_context(
            viewport={"width": 1920, "height": 1080}, # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
            record_video_dir=video_path, # –ü–∞–ø–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ
            record_video_size={"width": 1920, "height": 1080} # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ
        )
        
        page = await context.new_page()

        await login_to_site(page)

        try:
            await page.goto("https://url")
            logger.info("URL –æ—Ç–∫—Ä—ã—Ç.")
        except Exception as e:
            logger.error(f"URL –ù–ï –æ—Ç–∫—Ä—ã—Ç: {e}")
            pytest.fail(f"URL –ù–ï –æ—Ç–∫—Ä—ã—Ç: {e}")

       try:
            await asyncio.sleep(1)
            button = page.get_by_alt_text("EyeIcon")
            await expect(button).to_be_visible(timeout=4000)
            await button.click()
            logger.info("–°–ø–∏—Å–æ–∫ View –∫–ª–∏–∫–Ω—É—Ç.")
            await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"–°–ø–∏—Å–æ–∫ View –ù–ï –∫–ª–∏–∫–Ω—É—Ç: {e}")
            pytest.fail(f"–°–ø–∏—Å–æ–∫ View –ù–ï –∫–ª–∏–∫–Ω—É—Ç: {e}")

        try:
            await asyncio.sleep(1)
            checkbox = page.get_by_label("Show/Hide Existing")
            await checkbox.wait_for(timeout=4000)
            await checkbox.uncheck()
            await asyncio.sleep(1)
            logger.info("–ì–∞–ª–æ—á–∫–∞ 'Show/Hide Existing' —Å–Ω—è—Ç–∞ —É—Å–ø–µ—à–Ω–æ.")
        except Exception as e:
            logger.error(f"–ì–∞–ª–æ—á–∫–∞ 'Show/Hide Existing' –Ω–µ —Å–Ω—è—Ç–∞: {e}")
            pytest.fail(f"–ì–∞–ª–æ—á–∫–∞ 'Show/Hide Existing' –Ω–µ —Å–Ω—è—Ç–∞: {e}")

        try:
            button_view = page.get_by_alt_text("EyeIcon")
            await button_view.wait_for(timeout=3000)
            await button_view.click()
            await asyncio.sleep(1)
            
            checkbox = page.get_by_label("Show/Hide Existing")            
            await expect(checkbox).not_to_be_visible(timeout=3000)

            logger.info("–°–ø–∏—Å–æ–∫ View –∫–ª–∏–∫–Ω—É—Ç –∏ –∑–∞–∫—Ä—ã—Ç.")
        except Exception as e:
            logger.error(f"–°–ø–∏—Å–æ–∫ View –Ω–µ –∑–∞–∫—Ä—ã—Ç: {e}")
            pytest.fail(f"–°–ø–∏—Å–æ–∫ View –Ω–µ –∑–∞–∫—Ä—ã—Ç: {e}")

        await browser.close()
